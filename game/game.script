go.property("speed", 500)
go.property("distance", 0)

local flow = require "ludobits.m.flow"


local WIDTH = sys.get_config("display.width")
local HEIGHT = sys.get_config("display.height")

function init(self)
	math.randomseed(os.time())
	self.level = 1
	self.levels = {
		[1] = {
			{
				factory = msg.url("level1/level1#groundfactory"),
				z = 0,
				y = 0,
				spacing = { min = 0, max = 0 },
				y_variation = { min = 0, max = 0 },
				sprites = { hash("Walking Platforms 1") },
				amount = 2,
				objects = {}
			},
			--[[{
				factory = msg.url("level1/level1#factory"),
				z = 0,
				y = 200,
				spacing = { min = 50, max = 200 },
				y_variation = { min = 0, max = 0 },
				sprites = { hash("Flower 1"), hash("Flower 2"), hash("Flower 3"), hash("Flower 4"), hash("Flower 5") },
				amount = 10,
				objects = {}
			},--]]
			{
				factory = msg.url("level1/level1#factory"),
				z = -0.8,
				y = 500,
				spacing = { min = 50, max = 100 },
				y_variation = { min = -150, max = 250 },
				sprites = { hash("Clouds 1"), hash("Clouds 2"), hash("Clouds 7") },
				amount = 6,
				objects = {}
			},
			{
				factory = msg.url("level1/level1#factory"),
				z = -0.2,
				y = 300,
				spacing = { min = 250, max = 400 },
				y_variation = { min = -30, max = 10 },
				sprites = { hash("Forest Tree 1"), hash("Forest Tree 2"), hash("Forest Tree 3"), },
				amount = 6,
				objects = {}
			},
			{
				factory = msg.url("level1/level1#factory"),
				z = -0.5,
				y = 300,
				spacing = { min = 20, max = 150 },
				y_variation = { min = -150, max = 10 },
				sprites = { hash("Hill 1"), hash("Hill 2"), hash("Hill 3"), hash("Hill 4"), },
				amount = 6,
				objects = {}
			},
		},
		[2] = {
			{
				factory = msg.url("level1/level1#groundfactory"),
				z = 0,
				y = 0,
				spacing = { min = 0, max = 0 },
				y_variation = { min = 0, max = 0 },
				sprites = { hash("Walking Platforms 1") },
				amount = 2,
				objects = {}
			},
		},
	}
	
	for _, data in pairs(self.levels[self.level]) do
		local pos = vmath.vector3(0, data.y, data.z)
		for i=1,data.amount do
			local id = factory.create(data.factory, nil, nil, { anim_id = data.sprites[math.random(1, #data.sprites)] })
			local size = go.get(msg.url(nil, id, "sprite"), "size")
			data.width = size.x
			--data.width = 0
			go.set_position(pos, id)
			pos.x = pos.x + data.width + math.random(data.spacing.min, data.spacing.max)
			pos.y = data.y + math.random(data.y_variation.min, data.y_variation.max)
			table.insert(data.objects, id)
		end
	end
	
	go.animate("camera", "euler.z", go.PLAYBACK_LOOP_PINGPONG, -10, go.EASING_INOUTQUAD, 250)
	go.animate("camera", "position.y", go.PLAYBACK_LOOP_PINGPONG, 60, go.EASING_INOUTQUAD, 250)
	
	self.dt = 0.0167
	flow(function()
		while true do
			self.speed = 500
			self.distance = 50
			while self.distance > 0 do
				self.speed = math.min(self.speed + 10 * self.dt, 1000)
				self.distance = math.max(0, self.distance - (self.speed * self.dt * 0.025))
				flow.frames(1)
			end
			go.animate("#", "speed", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 5)
			while self.speed > 150 do
				flow.frames(1)
			end
			msg.post("player/player", "walk")
			while self.speed > 0 do
				flow.frames(1)
			end
			msg.post("player/player", "idle")
			while true do
				flow.frames(1)
			end
		end
	end)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end
local BG_COLOR = vmath.vector4(213/255, 237/255, 246/255, 1)

function update(self, dt)
	flow.update(dt)

	self.dt = dt

	msg.post("@render:", "clear_color", { color = BG_COLOR })
	msg.post("#hud", "update_distance", { distance = self.distance })
	
	for _, data in pairs(self.levels[self.level]) do
		local speed = vmath.vector3(math.max(0, self.speed - (-data.z * 250)), 0, 0)
		for _,id in pairs(data.objects) do
			local pos = go.get_position(id) - speed * dt
			if pos.x < -data.width then
				pos.x = pos.x + (data.width + math.random(data.spacing.min, data.spacing.max)) * #data.objects
			end
			go.set_position(pos, id)
		end
	end
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
