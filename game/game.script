local flow = require "ludobits.m.flow"
local live_update = require "game.live_update"
local settings = require "game.settings"


local PLAY_SFX = hash("play_sfx")
local PLAY_MUSIC = hash("play_music")

local function show_popup(text, button)
	msg.post("popup#script", "show", { text = text, button = button })
end

local function hide_popup()
	msg.post("popup#script", "hide")
end

function init(self)
	math.randomseed(os.time())
	msg.post("#", "acquire_input_focus")
	
	local LEVELS = 3
	flow(function()
		local level
		local next_level = 1
		local level_proxy
		while true do
			--
			-- Do we need to load any missing resources?
			--
			local next_level_proxy = "#level"..tostring(next_level)
			local missing_resource_count = live_update.missing_resource_count(next_level_proxy)
			if missing_resource_count > 0 then
				msg.post("popup#script", "show", { text = ("Level %d\n\nMissing resources: %d"):format(next_level, missing_resource_count), button = "LOAD" })
				flow.until_message(hash("popup_button"))

				--
				-- Try to load missing resources?
				--
				repeat
					local loading = true
						

					--live_update.load_missing_resources(next_level_proxy, "https://britzl.github.io/liverunner/defold/", function(status)
					live_update.load_missing_resources(next_level_proxy, "https://s3-eu-west-1.amazonaws.com/defold.liverunner/resources/", function(status)
						if status.done then
							if status.failed > 0 then
								show_popup(("Level %d\n\nUnable to load %d missing resources!"):format(next_level, status.failed), "RETRY")
								loading = false
							else
								print("DONE LOADING")
								show_popup(("Level %d\n\nLoaded all missing resources"):format(level), "PLAY")
								loading = false
							end
						else
							print("PROGRESS")
							show_popup(("Level %d\n\nLoaded %d bytes and %d/%d resources"):format(next_level, status.bytes, status.loaded, status.total))
						end
					end)
					while loading do
						flow.frames(1)
					end
					flow.until_message(hash("popup_button"))
					hide_popup()
					missing_resource_count = live_update.missing_resource_count(next_level_proxy)
				until missing_resource_count == 0
			else
				show_popup(("Level %d\n\nNo missing resources!"):format(next_level), "PLAY")
				flow.until_message(hash("popup_button"))
				hide_popup()
			end

			--
			-- Unload current level
			--
			if level_proxy then
				flow.unload(level_proxy)
			end
			level_proxy = next_level_proxy
			level = next_level

			--
			-- Load level and wait until the player has completed the level
			--
			flow.load(level_proxy)
			flow.until_message(hash("level_completed"))
			show_popup(("Level %d\n\nCompleted!"):format(level), "PLAY" )
			flow.until_message(hash("popup_button"))
			hide_popup()
			flow.delay(1)

			next_level = math.min(LEVELS, level + 1)
		end
	end)
end

function final(self)
	msg.post("#", "release_input_focus")
end

function update(self, dt)
	flow.update(dt)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.8352941176, 0.9294117647, 0.9647058824, 1) })
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == PLAY_SFX then
		msg.post(message.sound, "play_sound", { delay = message.delay, gain = settings.SFX * (message.gain or 1.0) })
	elseif message_id == PLAY_MUSIC then
		msg.post(message.sound, "play_sound", { delay = message.delay, gain = settings.MUSIC * (message.gain or 1.0) })
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
