go.property("speed", 100)
go.property("active", false)
go.property("flying", false)

local platypus = require "platypus.platypus"

local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local TRIGGER_RESPONSE = hash("trigger_response")
local GROUND = hash("ground")
local DEATH = hash("death")
local ACTIVATOR = hash("activator")

local GRAVITY = -100

function init(self)
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_SHAPES,
			ground = { hash("ground") },
			left = 20, right = 20,
			top = 40, bottom = 45,
		},
		gravity = self.flying and 0 or GRAVITY,
	})
	self.direction = -1
end

function update(self, dt)
	if self.direction ~= 0 then
		self.platypus.right(self.speed * self.direction)
	end
	self.platypus.update(dt)
	sprite.set_hflip("#sprite", self.direction > 0)
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if message.group == DEATH then
			go.delete()
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == GROUND then
			if message.normal.x == -1 then
				self.direction = self.direction * -1
			elseif message.normal.x == 1 then
				self.direction = self.direction * -1
			end
		end
	elseif message_id == TRIGGER_RESPONSE then
		if message.group == ACTIVATOR and not self.active then
			self.active = true
			self.direction = -1
		end
	end
end
