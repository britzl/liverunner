local platformer = require "ludobits.m.platformer"

local COIN = hash("coin")
local ENEMY = hash("enemy")
local DEATH = hash("death")
local GOAL = hash("goal")
local GROUND = hash("ground")
local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local COLLECTED_COIN = hash("collected_coin")

local RUNNING_SPEED = 500
local JUMP_POWER = 1500
local GRAVITY = -3000

local function send_to_hud(message_id, message)
	msg.post("game:/game#hud", message_id, message)
end

local function animate(self, animation)
	if self.animation ~= animation then
		msg.post("#sprite", "play_animation", { id = animation })
		self.animation = animation
	end
end

local function move_back(self)
	if not self.stop then
		animate(self, hash("player_idle"))
		self.platformer.stop()
		self.stop = true
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.initial_position, go.EASING_INOUTQUAD, 2, 0, function()
			self.stop = false
		end)
	end
end

function init(self)
	msg.post("#", "acquire_input_focus")
	self.velocity = vmath.vector3()
	self.platformer = platformer.create({ hash("ground"), hash("box") })
	self.platformer.gravity = GRAVITY
	self.velocity = vmath.vector3(200, 0, 0)
	self.coins = 0
	self.activator_url = msg.url("#activator")
	self.initial_position = go.get_position()
	send_to_hud("update_coins", { coins = self.coins })
end

function final(self)
	msg.post("#", "release_input_focus")
end

function update(self, dt)
	if self.stop then
		return
	end

	sprite.set_hflip("#sprite", self.platformer.velocity.x < 0)

	if self.platformer.ground_contact and not self.platformer.is_jumping() then
		animate(self, hash("player_walk"))
		if self.platformer.velocity.x ~= RUNNING_SPEED then
			self.platformer.right(RUNNING_SPEED)
		end
	else
		animate(self, hash("player_jump"))
	end
	
	-- wall slide should slow down fall
	if self.platformer.wall_contact and self.platformer.is_falling() then
		self.platformer.gravity = GRAVITY * 0.25
	else
		self.platformer.gravity = GRAVITY
	end

	self.platformer.update(dt)
end

function on_message(self, message_id, message, sender)
	if self.stop then
		return
	end
	self.platformer.on_message(message_id, message)
	if message_id == COLLISION_RESPONSE then
		if message.group == COIN then
			go.delete(message.other_id)
			msg.post("#", COLLECTED_COIN)
		elseif message.group == DEATH then
			move_back(self)
		elseif message.group == GOAL then
			print("GOAL")
			self.stop = true
			self.platformer.stop()
			animate(self, hash("player_idle"))
			msg.post("#", "release_input_focus")
			msg.post("level1:/level", "level_completeds")
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == ENEMY then
			if message.normal.y == 1 then
				go.delete(message.other_id)
				self.platformer.ground_contact = true
				self.platformer.jump(JUMP_POWER * 0.35, false, true)
			else
				print("ENEMY")
				go.delete(message.other_id)
				move_back(self)
			end
		elseif message.group == GROUND and message.normal.y == -1 then
			msg.post("/sounds#bump", "play_sound", { delay = 0, gain = 0.25 })
		end
	elseif message_id == COLLECTED_COIN then
		msg.post("/sounds#coin", "play_sound", { delay = 0, gain = 0.5 })
		self.coins = self.coins + 1
		send_to_hud("update_coins", { coins = self.coins })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") then
		if action.pressed then
			animate(self, hash("player_jump"))
			if self.platformer.velocity.x > 0 then
				--self.platformer.right(RUNNING_SPEED * 0.5)
			else
				--self.platformer.left(RUNNING_SPEED * 0.5)
			end
			self.platformer.jump(JUMP_POWER, false, true)
			msg.post("/sounds#jump", "play_sound", { delay = 0, gain = 0.25 })
		elseif action.released then
			self.platformer.abort_jump(0.1)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
