local platypus = require "platypus.platypus"

local COIN = hash("coin")
local ENEMY = hash("enemy")
local DEATH = hash("death")
local GOAL = hash("goal")
local GROUND = hash("ground")
local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local COLLECTED_COIN = hash("collected_coin")

local RUNNING_SPEED = 500
local JUMP_POWER = 1500
local GRAVITY = -3000

local function send_to_hud(message_id, message)
	msg.post("game:/game#hud", message_id, message)
end

local function send_to_game(message_id, message)
	msg.post("game:/game", message_id, message)
end

local function animate(self, animation)
	if self.animation ~= animation then
		msg.post("#sprite", "play_animation", { id = animation })
		self.animation = animation
	end
end

local function move_back(self)
	if not self.stop then
		animate(self, hash("player_idle"))
		self.stop = true
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, self.initial_position, go.EASING_INOUTQUAD, 2, 0, function()
			self.stop = false
		end)
	end
end

function init(self)
	msg.post("#", "acquire_input_focus")
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_SHAPES,
			ground = { hash("ground"), hash("box") },
			left = 32, right = 32,
			top = 46, bottom = 46,
		},
		allow_wall_jump = true,
		allow_double_jump = true,
		max_velocity = JUMP_POWER * 2,
		gravity = GRAVITY,
		debug = false,
	})

	self.direction = vmath.vector3(1, 0, 0)
	
	self.coins = 0
	self.activator_url = msg.url("#activator")
	self.initial_position = go.get_position()
	send_to_hud("update_coins", { coins = self.coins })
end

function final(self)
	msg.post("#", "release_input_focus")
end

function update(self, dt)
	if self.stop then
		return
	end

	sprite.set_hflip("#sprite", self.platypus.velocity.x < 0)

	-- make sure we're moving forward if we have ground contact and we're
	-- not about to make a jump
	if self.platypus.is_jumping() then
		animate(self, hash("player_jump"))
	elseif self.platypus.has_ground_contact() then
		animate(self, hash("player_walk"))
		self.direction.x = 1
	end

	if not self.platypus.has_wall_contact() then
		self.platypus.move(self.direction * RUNNING_SPEED)
	end
			
	-- wall slide should slow down fall
	if self.platypus.has_wall_contact() then
		self.platypus.gravity = GRAVITY * 0.25
	else
		self.platypus.gravity = GRAVITY
	end

	self.platypus.update(dt)
end

function on_message(self, message_id, message, sender)
	if self.stop then
		return
	end
	self.platypus.on_message(message_id, message)
	if message_id == COLLISION_RESPONSE then
		if message.group == COIN then
			go.delete(message.other_id)
			msg.post("#", COLLECTED_COIN)
		elseif message.group == DEATH then
			move_back(self)
		elseif message.group == GOAL then
			self.stop = true
			animate(self, hash("player_idle"))
			msg.post("#", "release_input_focus")
			msg.post("/level", "level_completed")
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == ENEMY then
			if message.normal.y > 0.3 then
				go.delete(message.other_id)
				self.platypus.force_jump(JUMP_POWER * 0.35)
			else
				go.delete(message.other_id)
				move_back(self)
			end
		elseif message.group == GROUND and message.normal.y == -1 then
			send_to_game("play_sfx", { sound = "/sounds#bump", gain = 0.25, delay = 0 })
		end
	elseif message_id == COLLECTED_COIN then
		send_to_game("play_sfx", { sound = "/sounds#coin", gain = 0.5, delay = 0 })
		self.coins = self.coins + 1
		send_to_hud("update_coins", { coins = self.coins })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") then
		if action.pressed then
			animate(self, hash("player_jump"))
			self.platypus.jump(JUMP_POWER, false, true)
			self.direction.x = self.platypus.velocity.x > 0 and 1 or -1
			send_to_game("play_sfx", { sound = "/sounds#jump", gain = 0.25, delay = 0 })
		elseif action.released then
			self.platypus.abort_jump(0.1)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
