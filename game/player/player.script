go.property("velocity", vmath.vector3())

local platformer = require "ludobits.m.platformer"

local COIN = hash("coin")
local ENEMY = hash("enemy")
local DEATH = hash("death")
local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")


local function send_to_hud(message_id, message)
	msg.post("game:/game#hud", message_id, message)
end

local function animate(self, animation)
	if self.animation ~= animation then
		msg.post("#sprite", "play_animation", { id = animation })
		self.animation = animation
	end
end

local function move_back(self)
	if not self.hurt then
		self.platformer.stop()
		self.hurt = true
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, go.get_position() + vmath.vector3(-600, 200, 0), go.EASING_INOUTQUAD, 2, 0, function()
			self.hurt = false
		end)
	end
end

function init(self)
	msg.post("#", "acquire_input_focus")
	self.velocity = vmath.vector3()
	self.platformer = platformer.create({ hash("ground") })
	self.platformer.gravity = -2000
	self.velocity = vmath.vector3(200, 0, 0)
	self.coins = 0
	self.activator_url = msg.url("#activator")
	send_to_hud("update_coins", { coins = self.coins })
end

function final(self)
	msg.post("#", "release_input_focus")
end

function update(self, dt)
	if self.hurt then
		print("UP HURT")
		return
	end

	sprite.set_hflip("#sprite", self.platformer.velocity.x < 0)

	if not self.platformer.is_jumping() and not self.platformer.is_falling() then
		animate(self, hash("player_walk"))
		print("no jumo no fall", self.platformer.velocity.x)
		if self.platformer.velocity.x ~= 500 then
			self.platformer.right(500)
		end
	else
		if self.platformer.velocity.x == 0 and self.platformer.ground_contact then
			print("right 200")
			self.platformer.right(200)
		end
		--self.platformer.right(300)
		animate(self, hash("player_jump"))
	end

	--print(self.platformer.ground_contact and "ground contact" or "in air")
	
	--go.set_position(go.get_position() + vmath.vector3(300, -1000, 0) * dt)
	self.platformer.update(dt)
	
	self.velocity = self.platformer.velocity
end

function on_message(self, message_id, message, sender)
	if self.hurt then
		print("ON MESS HURT")
		return
	end
	self.platformer.on_message(message_id, message)
	if message_id == COLLISION_RESPONSE then
		if message.group == COIN then
			go.delete(message.other_id)
			self.coins = self.coins + 1
			send_to_hud("update_coins", { coins = self.coins })
		elseif message.group == DEATH then
			print("DEATH")
			move_back(self)
			go.delete(message.other_id)
		end
	elseif message_id == CONTACT_POINT_RESPONSE then
		if message.group == ENEMY then
			if message.normal.y == 1 then
				go.delete(message.other_id)
			else
				print("ENEMY")
				go.delete(message.other_id)
				move_back(self)
			end
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") then
		if action.pressed then
			animate(self, hash("player_jump"))
			if self.platformer.velocity.x > 0 then
				self.platformer.right(350)
			else
				self.platformer.left(350)
			end
			self.platformer.jump(1300, false, true)
		elseif action.released then
			self.platformer.abort_jump()
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
